#!/usr/bin/env bash

source ~/bin/_util

# music
#
# A wrapper tool for cmus player
#
# (c) 2017 Jacob Shreve
#
# This executable serves several purposes
# 1. CLI for cmus without opening via `cmus-remote`
# 2. Detachable wrapper for cmus
#    Running `music` starts a screen session containing cmus. The q command is
#    bound to detach from the session inside cmus, so music plays in the
#    background, and it's easy to attach and control
# 3. Generate the status line for i3blocks
# 4. Alert of the current track using notify-send

# These paths all contain full paths because sometimes root uses this
log=/home/jacob/.config/cmus/log
socket=/home/jacob/.config/cmus/socket
server="--server $socket"
cache=/home/jacob/.cache/cmus-status
trunc_length=115

# We only need to call cmus-remote once, then read from cache file as needed
cmus-remote $server -Q > $cache 2>&1

###############   Commands   ###################
play() {
    cmus-remote $server --play
    alert-current
}

pause() {
    cmus-remote $server --pause
    alert_current
}

prev() {
    cmus-remote $server --prev
    alert_current
}

next() {
    cmus-remote $server --next
    alert_current
}

start() {
    if ! attach_cmus; then run_cmus; fi
}

attach_cmus() {
    screen -r -D cmus >/dev/null 2>&1
}

run_cmus() {
    screen -S cmus /usr/bin/cmus --listen $socket >/dev/null 2>&1
}

quit() {
    screen -X -S cmus quit >/dev/null 2>&1
}

status-line() {
    if pgrep cmus >/dev/null 2>&1; then
       text=$(echo "$(artist) :: $(song)" | truncate)
       if [ "$(status)" == "paused" ]; then
           pango_color 'grey' "$text"
       else
           pango_color 'leafy' "$text"
       fi
    fi
}

status-line-no-icons() {
    if pgrep cmus >/dev/null 2>&1; then
       echo "$(artist) :: $(song)" | truncate
    fi
}



################   Data   ####################
artist () {
    grep " artist " $cache | awk '{$1=$2=""; print $0}' | sanitize
}

song () {
    grep title $cache        | awk '{$1=$2=""; print $0}' | sanitize
}

status () {
    grep status $cache       | awk '{print $2}'
}

shuffle() {
    grep "shuffle" $cache    | awk '{print $3}'
}

repeat() {
    grep "repeat " $cache    | awk '{print $3}'
}

################   Aux   #####################
update_i3blocks () {
  pkill -RTMIN+12 i3blocks
}

alert_current() {
    if pgrep cmus >/dev/null; then
        if [ "$(status)" = "playing" ]; then
            notify-send -t 10 -u low -a cmus "Currently Playing" "$(status-line-no-icons)"
        fi
    fi
}

sanitize() {
    sed -e 's/\&/&amp;/' | sed -e 's/^\s\+//'
}

truncate() {
    local length=$trunc_length
    read -r text
    if [ "$(echo $text | wc -c)" -gt "$length" ]; then
        echo "$(echo $text | cut -c 1-$length)..."
    else
        echo $text
    fi
}

download() {
    # Download page
    local page=$(mktemp)
    curl $1 > $page 2>&1

    # Extract the title, and some artist info from it
    title=$(awk -vRS="</title>" '/<title>/{gsub(/.*<title>|\n+/,"");print;exit}' $page)
    rm $page
    title=$(echo $title | \
                   sed -e 's/ - YouTube//' | \
                   sed -e 's/\//-/g' | \
                   sed -e "s/&#39;/'/g")
    artist=$(echo $title | awk -F ' - ' '{print $1}')
    song=$(echo $title | awk -F ' - ' '{print $2}')

    # Prompt for Artist, Song, and Album information
    read -p "Artist [$artist]: " set_artist
    read -p "Song [$song]: " set_song
    read -p "Album []: " set_album

    [ "$set_artist" == "" ] && set_artist=$artist;
    [ "$set_song" == "" ] && set_song=$song;
    [ "$set_album" == "" ] && set_album="Unknown Album";

    # Download the song
    youtube-dl --extract-audio \
               -f 'mp3/bestaudio' \
               --audio-format mp3 \
               --output "~/Music/$set_artist/$set_album/$set_song.%(ext)s" "$1"

    echo "Looking for: $set_song"
    file=$(find "/home/jacob/Music/$set_artist" -name "*$set_song*")
    echo "Found: $file"

    if [ -e "$file" ]; then
        mp3info -a "$set_artist" -l "$set_album" -t "$set_song" "$file"
        mp3info -i "$file"
        cmus-remote $server --raw "add $file"
    fi
}

edit() {
    file=$(cmus-remote $server -C "echo {}")
    echo "$file"

    if [ -e "$file" ]; then
        mp3info -if "$file"
        cmus-remote $server -C "update-cache -f"
    fi
}

case "$1" in

    # In most cases, play really means `toggle pause`.
    # To cmus, play means play the current file from the beginning.
    play|pause)
        pause
        ;;

    prev)
        prev
        ;;

    next)
        next
        ;;

    start)
        # The --i3 flag opens a new terminal to re-run the command without the
        # flag. This is useful because i3 can't start a screen session using
        # exec. `music start` needs to be run from a terminal to work.
        if [[ $* = *--i3* ]]; then
            gnome-terminal --command "$0 start"
        else
            start
        fi
        ;;

    quit|"kill")
        quit
        ;;

    update)
        ;;

    status-line)
        [ "$(cat $cache)" = "" ] && exit 1
        status-line
        exit 0 # Exit instead of updating i3blocks to avoid infinite loop
        ;;

    info)
        cmus-remote $server -Q
        ;;

    dl)
        [ $# -lt 2 ] && exit 1
        download $2
        ;;

    edit)
        if [[ $* = *--cmus* ]]; then
            nohup gnome-terminal --command "$0 edit" &
        else
            edit
        fi
        ;;

    "")
        start
        ;;

    --help|-h|help)
        echo "usage: music [cmd]
\`music\` without parameters opens a screen session with cmus and attaches

play or pause    toggle pause
prev             restart song or jump to previous song
next             jump to next track
quit or kill     properly quit the cmus player
status-line      get a one-line summary of cmus
info             get all the info from cmus about its status
dl url           download a youtube video and add it to your library"
        ;;

esac

# Always send the update signal to i3blocks.
update_i3blocks
