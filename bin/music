#!/usr/bin/env bash

# music
#
# A wrapper tool for cmus player
#
# (c) 2017 Jacob Shreve
#
# This executable serves several purposes
# 1. CLI for cmus without opening via `cmus-remote`
# 2. Detachable wrapper for cmus
#    Running `music` starts a screen session containing cmus. The q command is
#    bound to detach from the session inside cmus, so music plays in the
#    background, and it's easy to attach and control
# 3. Generate the status line for i3blocks
# 4. Alert of the current track using notify-send

# These paths all contain full paths because sometimes root uses this
log=/home/jacob/.config/cmus/log
socket=/home/jacob/.config/cmus/socket
server="--server $socket"
cache=/home/jacob/.cache/cmus-status

# We only need to call cmus-remote once, then read from cache file as needed
cmus-remote $server -Q > $cache

echo $@ >> $log

###############   Commands   ###################
play() {
    cmus-remote $server --play
    alert-current
}

pause() {
    cmus-remote $server --pause
    alert_current
}

prev() {
    cmus-remote $server --prev
    alert_current
}

next() {
    cmus-remote $server --next
    alert_current
}

start() {
    if ! screen -r -D cmus >/dev/null ; then
        screen -S cmus /usr/bin/cmus --listen $socket
    fi
}

quit() {
    screen -X -S cmus quit >/dev/null 2>&1
}

status-line() {
    echo "$(icons)  :: $(artist) :: $(song)" | sanitize | truncate
}



################   Data   ####################
artist () {
    grep " artist " $cache | awk '{$1=$2=""; print $0}' | sed 's/^\s\+//'
}

song () {
    grep title $cache        | awk '{$1=$2=""; print $0}' | sed 's/^\s\+//'
}

status () {
    grep status $cache       | awk '{print $2}'
}

shuffle() {
    grep "shuffle" $cache    | awk '{print $3}'
}

repeat() {
    grep "repeat " $cache    | awk '{print $3}'
}

icons () {
    text=""

    case "$(status)" in
        playing)
            text=""
            ;;

        paused)
            text=""
            ;;
    esac

    case "$(shuffle)" in
        true)
            text="$text $(colorize '#fff' '')"
            ;;

        false)
            text="$text  $(colorize '#666' '')"
            ;;
    esac

    case "$(repeat)" in
        true)
            text="$text $(colorize '#fff' '')"
            ;;

        false)
            text="$text $(colorize '#666' '')"
            ;;
    esac


    echo $text
}


################   Aux   #####################
update_i3blocks () {
  pkill -RTMIN+12 i3blocks
}

alert_current() {
    if pgrep cmus >/dev/null; then
        if [ "$(status)" = "playing" ]; then
            notify-send -t 10 -u low -a cmus "Currently Playing" "$(artist) :: $(song)"
        fi
    fi
}

# Colorize for pango, which powers i3blocks
colorize() {
    echo "<span foreground=\"$1\"> $2 </span>"
}

sanitize() {
    sed -e 's/\&/&amp;/'
}

truncate() {
    local length=$(bc -l <<< "50 + $(echo $(icons) | wc -c)")
    read text
    if [ "$(echo $text | wc -c)" -gt "$length" ]; then
        echo "$(echo $text | cut -c 1-$length)..."
    else
        echo $text
    fi
}

case "$1" in

    # In most cases, play really means `toggle pause`.
    # To cmus, play means play the current file from the beginning.
    play|pause)
        pause
        ;;

    prev)
        prev
        ;;

    next)
        next
        ;;

    start)
        # The --i3 flag opens a new terminal to re-run the command without the
        # flag. This is useful because i3 can't start a screen session using
        # exec. `music start` needs to be run from a terminal to work.
        if [[ $* = *--i3* ]]; then
            if ! pgrep cmus; then
                gnome-terminal --command "$0 start"
            else
                play
            fi
        else
            start
        fi
        ;;

    quit|"kill")
        quit
        ;;

    update)
        ;;

    status-line)
        status-line
        exit 0 # Exit instead of updating i3blocks to avoid infinite loop
        ;;

    info)
        cmus-remote $server -Q
        ;;

    "")
        start
        ;;

    --help|-h|help)
        echo "usage: music [cmd]
\`music\` without parameters opens a screen session with cmus and attaches

play or pause    toggle pause
prev             restart song or jump to previous song
next             jump to next track
quit or kill     properly quit the cmus player
status-line      get a one-line summary of cmus
info             get all the info from cmus about its status"
        ;;

esac

# Always send the update signal to i3blocks.
update_i3blocks
